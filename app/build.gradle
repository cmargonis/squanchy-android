import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    dependencies {
        classpath gradlePlugins.buildProperties
        classpath gradlePlugins.fabric
        classpath gradlePlugins.kotlin
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: 'build-properties.gradle'

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        applicationId(applicationProps['applicationId'].or(envVars['APPLICATION_ID']).string)

        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)

        multiDexEnabled true

        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        vectorDrawables.useSupportLibrary = true

        manifestPlaceholders += [
            fabricApiKey: secretsProps['fabricApiKey'].or(envVars['FABRIC_API_KEY']).string
        ]

        resValueString 'app_name', applicationProps['applicationName'].or("Squanchy")

        resValueString 'algolia_application_id', applicationProps['algoliaId'].or(envVars['ALGOLIA_APPLICATION_ID'])
        resValueString 'algolia_api_key', secretsProps['algoliaApiKey'].or(envVars['ALGOLIA_API_KEY'])
        resValueString 'algolia_indices_prefix', applicationProps['algoliaIndicesPrefix'].or(envVars['ALGOLIA_INDICES_PREFIX'])

        resValueString 'deeplink_scheme', applicationProps['deeplinkScheme'].or("squanchy")
    }

    signingConfigs.all { signingConfig ->
        signingConfig.ext.from = { buildProperties ->
            signingConfig.storeFile teamPropsFile(buildProperties['storeFile'].string)
            signingConfig.storePassword buildProperties['storePassword'].string
            signingConfig.keyAlias buildProperties['keyAlias'].string
            signingConfig.keyPassword buildProperties['keyPassword'].string
        }
    }

    if (isNotRunningOnCI()) {
        signingConfigs {
            debug.from debugSigningConfig
            release.from releaseSigningConfig
        }

        buildTypes {
            debug {
                minifyEnabled false
            }
            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
        }
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
    }

    lintOptions {
        lintConfig teamPropsFile('static-analysis/lint-config.xml')
        warningsAsErrors true
        ignoreTestSources true // See https://groups.google.com/forum/#!topic/lint-dev/RGTvK_uHQGQ
    }
}

private static boolean isNotRunningOnCI() {
    System.getenv('CI') == null
}

play {
    // TODO uncomment these lines if you want to be able to publish to the Play Store, but *ONLY* do it
    // on a release branch or you'll risk shipping random stuff to the Store (don't ask)

    enabled = false // Enable to allow publishing to Google Play
//    jsonFile = teamPropsFile('play-store-keys.json')
//    errorOnSizeLimit = true
//    uploadImages = true
//    track = 'production'
}

detekt {
    toolVersion detektVersion

    input = files("$projectDir/src/")
    config = files("$rootDir/team-props/static-analysis/detekt-config.yml")
    filters = '.*/test/.*,.*/resources/.*,.*/tmp/.*,.*/build/.*,.*/debug/.*'
    reports {
        xml.enabled = true
        html.enabled = true
    }
    parallel = true
    buildUponDefaultConfig = true
}

ktlint {
    android = true
    version = ktlintVersion
    ignoreFailures = true
    reporters = [ReporterType.PLAIN_GROUP_BY_FILE, ReporterType.CHECKSTYLE]
}

dependencies {
    implementation project(':renderthread')

    implementation libraries.app.algolia
    implementation libraries.app.androidxKtx
    implementation libraries.app.arrowCore
    implementation libraries.app.crashlytics
    implementation libraries.app.dagger
    implementation libraries.app.firebaseAuth
    implementation libraries.app.firebaseConfig
    implementation libraries.app.firebaseCore
    implementation libraries.app.firebaseFirestore
    implementation libraries.app.firebaseMessaging
    implementation libraries.app.firebaseStorage
    implementation(libraries.app.firebaseUiStorage) {
        exclude group: 'com.google.firebase'
    }
    implementation libraries.app.flexbox
    implementation libraries.app.glide
    implementation libraries.app.glideOkHttp3
    implementation libraries.app.threeTenAbp
    implementation libraries.app.kotlin
    implementation libraries.app.kotlinReflect
    implementation libraries.app.moshi
    implementation libraries.app.moshiKotlin
    implementation libraries.app.playServicesAuth
    implementation libraries.app.rxAndroid
    implementation libraries.app.rxJava
    implementation libraries.app.rxKotlin
    implementation libraries.app.rxLint
    implementation libraries.app.androidxAppCompat
    implementation libraries.app.androidxConstraintLayout
    implementation libraries.app.androidxWorkManager
    implementation libraries.app.androidxWorkManagerRx
    implementation libraries.app.androidxMaterial
    implementation libraries.app.timber
    implementation libraries.app.viewPagerAdapter

    kapt libraries.app.daggerCompiler
    kapt libraries.app.glideCompiler

    testImplementation libraries.test.truth
    testImplementation libraries.test.jUnit4
    testImplementation libraries.test.mockito
    testImplementation libraries.test.threeTenBp
}

apply plugin: 'com.google.gms.google-services'
